library("msdata")
library("mzR")
library("MSnbase")
fls <- protemoics(full.names = TRUE)
library("msdata")
library("mzR")
library("MSnbase")
fls <- protemoics(full.names = TRUE)
library("msdata")
library("mzR")
library("MSnbase")
proteomics()
fls <- proteomics(full.names = TRUE)
basename(fls)
fl <- fls [2]
fl
Joe <- proteomics(full.names = TrUE)
Joe <- proteomics(full.names = TRUE)
Joe1 <- openMSfile(ASD)
Joe1 <- openMSfile("ASD")
Joe1 <- openMSfile("ASD")
Joe1 <- openMSfile(ASD)
Joe1 <- openMSfile(ASD.mzData)
Joe2 <- ASD(full.names = TRUE)
Joe2 <- MALDI(full.names = TRUE)
Joe1 <- openMSfile(MALDI)
Joe1 <- openMSfile(MALDI)
Joe2 <- Maldi
Joe2 <- MALDI
Joe2 <- ASD.mzData
?proteomics
?basename
a <- "Maldi"
a <- C:\Users\nolik\Documents\Mass Spectrometry\MALDI
?basename
b <- basename(C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
b <- path(C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
path(Joe1,C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
path(Joe1, C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
path("Joe1", C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
Joe1 <- new("A", stuff=runif(5))
dirname(a)
dirname(a,C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
setClass("A")
a <- new("A",path=c(one=C:\Users\nolik\Documents\Mass Spectrometry\MALDI))
path(showMethods("path"))
path(a,C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
path(C:\Users\nolik\Documents\Mass Spectrometry\MALDI,a)
dirname(path,C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
path(fl,C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
?openMSfile()
openMSfile(MALDI)
filepath <- C:\Users\nolik\Documents\Mass Spectrometry\MALDI
filepath <- system.file(C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
openMSfile(C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
openMSfile("C:\Users\nolik\Documents\Mass Spectrometry\MALDI")
openMSfile(C:\Users\nolik\Documents\Mass Spectrometry\MALDI)
openMSfile("MALDI")
openMSfile(MALDI)
openMSfile("MALDI"")
openMSfile("MALDI")
Joe1 <- ASD.mzData
Joe1 <- ASD
Joe1 <- "ASD.mzData"
Joe1
joe2 <- openMSfile("MALDI")
joe2 <- openMSfile("MALDI data")
joe2 <- openMSfile("MD")
ASD <- read.table("~/Mass Spectrometry/MALDI/ASD.mzData", quote="\"", comment.char="")
View(ASD)
load("~/Mass Spectrometry/MALDI/ASD.mzData")
joe2 <- openMSfile(""~/Mass Spectrometry/MALDI/ASD.mzData"")
joe2 <- openMSfile("~/Mass Spectrometry/MALDI/ASD.mzData")
spectra(joe2,1)
JD1 <-spectra(joe2,1)
head(JD!)
head(JD1)
View(JD1)
JDH <- header(joe2)
head(JDH)
readMSData(MALDI)
Nolan1<-MALDI
Nolan1<- ("~/Mass Spectrometry/MALDI")
readMSData(("~/Mass Spectrometry/MALDI/)
readMSData("~/Mass Spectrometry/MALDI/")
readMSData(joe2, mode= "onDisk")
readMSData(joe2)
joe3 <- openMSfile("~/Mass Spectrometry/MALDI/")
joe3 <- openMSfile("~/Mass Spectrometry/MALDI")
joe3 <- openMSfile("~/Mass Spectrometry/MALDI/FSD.mzData")
head(joe3)
dim(joe)
dim(joe3)
View(joe3)
View(joe3)
JDS1<-spectra(joe3)
View(JDS1)
View(JDS1)
JDS1<-spectra(joe3,1)
JDS1<-spectra(joe3,2)
JDS1<-spectra(joe3,1)
openMSfile(Nolan1)
library(ggplot2)
library(tidyverse)
ggplot(data=JD1) + geom_histogram(mapping=aes(x=)x)
ggplot(data=JD1) + geom_histogram(mapping=aes(x= column 1))
head(JD1)
ggplot(data=JD1) + geom_histogram(mapping=aes(x= 1))
View(JDH)
View(JDH)
xy <- c(m/z,intensity)
xy <- c(daltons,intensity)
xy <- c(dalton,intensity)
xy <- c(Cool,intensity)
xy <- c('m/z','intensity')
MassSpec <- data.frame(xy,JD1)
MSD <- data.frame(JD1)
head(MSD)
ggplot(data=MSD) + geom_histogram(mapping=aes(x= X1))
ggplot(data=MSD) + geom_point(mapping=aes(x= X1))
ggplot(data=MSD) + geom_point(mapping=aes(x= X1,y=X2))
ggplot(data=MSD) + stat_bin(binwidth = 1, origin = 10) x= X1, y=X2..count.., ..ncount.., ..density.., ..ndensity..
ggplot(data=MSD) + stat_density2d(aes(fill=..level..),geom = "polygon", n=100)
ggplot(data=MSD) + stat_density2d(aes(x=X1, x=X2)(fill=..level..),geom = "polygon", n=100)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2)(fill=..level..),geom = "polygon", n=100)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=100)
View(MSD)
?stat_density2d
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=200)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=300)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=1)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=10)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X2,fill=..level..),geom = "polygon", n=200)
?normalize()
normalize(MSD,sum)
normalize(MSD)
normalize(JD1,sum)
normalize(JD1)
normalise(JD1)
Use scales:::rescale(MSD$X2)
scales:::rescale(MSD$X2)
X3<- scales:::rescale(MSD$X2)
mutate(MSD,X3)
MSDN<-mutate(MSD,X3)
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X2,color=X3))
view(MSDN)
MSDN
View(MSDN)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X3,fill=..level..),geom = "polygon", n=200)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X3,fill=..level..),geom = "sphere", n=200)
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X2,color=X3))
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X3,fill=..level..),geom = "sphere", n=200)
ggplot(data=MSD) + stat_density2d(aes(x=X1, y=X3,fill=..level..),geom = "polygon", n=200)
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X2,color=X3))
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_bar(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_bar(mapping = aes(x=X1,))
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_histogram(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_density(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_area(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_area(mapping = aes(x=X1,y=X3,size=1))
ggplot(data=MSDN)+geom_area(mapping = aes(x=X1,y=X3,size=3))
ggplot(data=MSDN)+geom_area(mapping = aes(x=X1,y=X3,size=1))
ggplot(data=MSDN)+geom_density(mapping = aes(x=X1,y=X3))
ggplot(data=MSDN)+geom_point(mapping = aes(x=X1,y=X3))
View(JDH)
View(MSD)
View(MSDN)
library(tidyverse)
ggplot(data=MSDN) + geom_point(mapping=aes(x=x1,y=x2))
ggplot(data=MSDN) + geom_point(mapping=aes(x=X1,y=X2))
ggplot(data=MSDN) + geom_point(mapping=aes(x=X1,y=X3,color=X3))
ggplot(data=MSDN) + geom_line(mapping=aes(x=X1,y=X3,color=X3))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color, n= color))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color, n = color))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color, count = color))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 99/ 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 10000)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 1000)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 300)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 400)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 500 )
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 750)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 650)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 550)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 500)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 550
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1/ 550)
install.packages("plot3D")
data(iris)
head(iris)
x < Sepal.Length
x <- Sepal.Length
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
install.packages("plotly")
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv")
data_2007 <- data[which(data$year == 2007),]
data_2007 <- data_2007[order(data_2007$continent, data_2007$country),]
data_2007$size <- data_2007$pop
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors,
marker = list(symbol = 'circle', sizemode = 'diameter'), sizes = c(5, 150),
text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
'<br>Pop.:', pop)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
scene = list(xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
range = c(2.003297660701705, 5.191505530708712),
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
range = c(36.12621671352166, 91.72921793264332),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
zaxis = list(title = 'Population',
gridcolor = 'rgb(255, 255, 255)',
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2)),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors,
+              marker = list(symbol = 'circle', sizemode = 'diameter'), sizes = c(5, 150),
+              text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
+                            '<br>Pop.:', pop)) %>%
+     layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
+            scene = list(xaxis = list(title = 'GDP per capita (2000 dollars)',
+                                      gridcolor = 'rgb(255, 255, 255)',
+                                      range = c(2.003297660701705, 5.191505530708712),
+                                      type = 'log',
+                                      zerolinewidth = 1,
+                                      ticklen = 5,
+                                      gridwidth = 2),
+                         yaxis = list(title = 'Life Expectancy (years)',
+                                      gridcolor = 'rgb(255, 255, 255)',
+                                      range = c(36.12621671352166, 91.72921793264332),
+                                      zerolinewidth = 1,
+                                      ticklen = 5,
+                                      gridwith = 2),
+                         zaxis = list(title = 'Population',
+                                      gridcolor = 'rgb(255, 255, 255)',
+                                      type = 'log',
+                                      zerolinewidth = 1,
+                                      ticklen = 5,
+                                      gridwith = 2)),
+            paper_bgcolor = 'rgb(243, 243, 243)',
+            plot_bgcolor = 'rgb(243, 243, 243)'
+
library(plotly)
chart_link = api_create(p, filename="scatter3d-bubble")
chart_link
chart_link = api_create(p, filename="scatter3d-bubble")
library(plotly)
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv")
data_2007 <- data[which(data$year == 2007),]
data_2007 <- data_2007[order(data_2007$continent, data_2007$country),]
data_2007$size <- data_2007$pop
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors,
marker = list(symbol = 'circle', sizemode = 'diameter'), sizes = c(5, 150),
text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
'<br>Pop.:', pop)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
scene = list(xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
range = c(2.003297660701705, 5.191505530708712),
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
range = c(36.12621671352166, 91.72921793264332),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
zaxis = list(title = 'Population',
gridcolor = 'rgb(255, 255, 255)',
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2)),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors)
p
p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors,
marker = list(symbol = 'circle', sizemode = 'diameter'), sizes = c(5, 150),
text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
'<br>Pop.:', pop)) %>%
layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
scene = list(xaxis = list(title = 'GDP per capita (2000 dollars)',
gridcolor = 'rgb(255, 255, 255)',
range = c(2.003297660701705, 5.191505530708712),
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Life Expectancy (years)',
gridcolor = 'rgb(255, 255, 255)',
range = c(36.12621671352166, 91.72921793264332),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
zaxis = list(title = 'Population',
gridcolor = 'rgb(255, 255, 255)',
type = 'log',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2)),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
p
